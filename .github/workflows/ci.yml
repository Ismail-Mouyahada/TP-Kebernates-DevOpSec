```yaml
name: CI/CD Pipeline

on:
  push:
    branches:
      - main
      - develop # Add other branches as needed
  pull_request:
    branches:
      - main
      - develop # Add other branches as needed

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Build and push Docker image
        run: |
          docker buildx build --platform linux/amd64,linux/arm64 -t ghcr.io/${{ github.repository }}/tp-kebernates-devopsec:${{ github.sha }} .
          docker push ghcr.io/${{ github.repository }}/tp-kebernates-devopsec:${{ github.sha }}

      - name: Deploy to Kubernetes (if main branch)
        if: github.ref == 'refs/heads/main'
        run: |
          # Replace with your Kubernetes deployment commands
          kubectl apply -f k8s/deployment.yaml
          # Consider using kubectl rollout status to check deployment status

  # Lint (Optional -  replace with your linting tool if applicable)
  # Since HCL doesn't have a standard linter as widely used as ESLint for JS, this section is commented out.
  # Uncomment and adapt if you have a specific linter for HCL
  # lint:
  #   runs-on: ubuntu-latest
  #   steps:
  #     - name: Checkout code
  #       uses: actions/checkout@v3
  #     - name: Install linter
  #       run: # Install your HCL linter here (e.g., using apt, npm, etc.)
  #     - name: Run linter
  #       run: # Run your HCL linter here
  #       if: success()

# Notifications (using email - adapt to your notification preference)
      - name: Send email notification on failure
        if: failure()
        uses: appleboy/email@v1.2.5
        with:
          host: smtp.example.com # Replace with your SMTP server
          port: 587 # Replace with your SMTP port
          username: your_email@example.com # Replace with your email
          password: ${{ secrets.EMAIL_PASSWORD }} # Replace with your email password
          to: recipient_email@example.com # Replace with recipient email
          subject: GitHub Actions Workflow Failed - TP-Kebernates-DevOpSec
          body: |
            The GitHub Actions workflow for TP-Kebernates-DevOpSec failed.
            Check the workflow logs for details.
            Workflow URL: ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}


```

**Avant d'utiliser ce workflow:**

* **Remplacez les placeholders:**  Remplacez  `ghcr.io/${{ github.repository }}/tp-kebernates-devopsec` par votre registre Docker et le nom de votre image.  Remplacez les instructions de déploiement Kubernetes (`kubectl apply -f k8s/deployment.yaml`) par vos propres commandes.  Configurez vos informations SMTP pour les notifications par email.  Créez un secret GitHub nommé `EMAIL_PASSWORD` avec votre mot de passe SMTP.
* **Adaptez le linting (facultatif):**  Si vous utilisez un outil de linting pour HCL, décommentez la section `lint` et ajoutez les instructions appropriées pour l'installer et l'exécuter.
* **Gestion des secrets:**  Stocker vos mots de passe et autres informations sensibles en tant que secrets GitHub pour éviter de les commiter directement dans votre code.
* **Structure de projet:** Assurez-vous que votre fichier `Dockerfile` se trouve à la racine de votre dépôt.  Le fichier `k8s/deployment.yaml` (ou votre fichier de configuration Kubernetes équivalent) doit également exister.


Ce workflow fournit une base solide. Vous pouvez l'étendre avec des étapes supplémentaires, comme des tests unitaires, une analyse de la vulnérabilité de l'image Docker, etc., selon les besoins de votre projet.  N'oubliez pas de consulter la documentation GitHub Actions pour plus d'informations sur les actions et les options disponibles.
